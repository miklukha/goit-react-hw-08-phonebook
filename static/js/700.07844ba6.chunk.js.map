{"version":3,"file":"static/js/700.07844ba6.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm();\n\n  const onSubmit = data => {\n    const { name } = data;\n    const isExistName = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isExistName) {\n      toast.info(`${name} is already in contacts`);\n      reset();\n      return;\n    }\n\n    try {\n      dispatch(contactsOperations.addContact(data));\n      toast.success('Contact has added');\n    } catch (error) {\n      toast.error('Error when adding material');\n      console.log(error);\n    }\n    reset();\n  };\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={handleSubmit(onSubmit)}\n      sx={{\n        mt: 1,\n        width: '400px',\n        display: 'flex',\n        margin: '0 auto',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}\n    >\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"outlined-required\"\n        label=\"Name\"\n        name=\"name\"\n        autoFocus\n        autoComplete=\"off\"\n        helperText={\n          errors?.name && (errors?.name?.message || 'This field is required')\n        }\n        {...register('name', {\n          required: true,\n          pattern: {\n            value: /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n            message:\n              \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          },\n        })}\n      />\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        type=\"tel\"\n        id=\"outlined-required\"\n        label=\"Number\"\n        name=\"number\"\n        autoFocus\n        autoComplete=\"off\"\n        helperText={\n          errors?.number &&\n          (errors?.number?.message || 'This field is required')\n        }\n        {...register('number', {\n          type: 'tel',\n          required: true,\n          pattern: {\n            value:\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n            message:\n              'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +.',\n          },\n        })}\n      />\n      <Button type=\"submit\" variant=\"contained\" sx={{ mt: 3, mb: 2 }}>\n        Add contact\n      </Button>\n    </Box>\n  );\n}\n","import DeleteIcon from '@mui/icons-material/Delete';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nexport function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n  const isLoading = useSelector(contactsSelectors.getIsLoading);\n\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    contacts && (\n      <Box>\n        <Grid item xs={12} md={6}>\n          <List>\n            {contacts.map(({ id, name, number }) => (\n              <ListItem\n                key={id}\n                sx={{\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  width: '400px',\n                }}\n                secondaryAction={\n                  <IconButton\n                    edge=\"end\"\n                    aria-label=\"delete\"\n                    disabled={isLoading}\n                    onClick={() => onDeleteContact(id)}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                }\n              >\n                <ListItemText primary={name} sx={{ flexBasis: '150px' }} />\n                <ListItemText secondary={number} sx={{ flexBasis: '150px' }} />\n              </ListItem>\n            ))}\n          </List>\n        </Grid>\n      </Box>\n    )\n  );\n}\n","import TextField from '@mui/material/TextField';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter, contactsSelectors } from 'redux/contacts';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(contactsSelectors.getFilter);\n\n  return (\n    <TextField\n      id=\"standard-search\"\n      label=\"Find contacts by name\"\n      type=\"search\"\n      variant=\"standard\"\n      name=\"query\"\n      value={value}\n      autoFocus\n      autoComplete=\"off\"\n      onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n    />\n  );\n}\n","import Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport Stack from '@mui/material/Stack';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nexport function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Box\n        sx={{\n          pt: 8,\n          pb: 6,\n        }}\n      >\n        <Typography\n          component=\"h1\"\n          variant=\"h2\"\n          align=\"center\"\n          color=\"text.primary\"\n          gutterBottom\n        >\n          Phonebook\n        </Typography>\n        <ContactForm />\n        <Divider variant=\"middle\" />\n        <Typography\n          component=\"h2\"\n          variant=\"h3\"\n          align=\"center\"\n          color=\"text.primary\"\n          gutterBottom\n          sx={{\n            mt: '20px',\n          }}\n        >\n          Contacts\n        </Typography>\n        {contacts.length !== 0 ? (\n          <Stack spacing={2} sx={{ alignItems: 'center' }}>\n            <Filter />\n            <ContactList />\n          </Stack>\n        ) : (\n          <Typography\n            component=\"p\"\n            variant=\"h6\"\n            color=\"text.primary\"\n            align=\"center\"\n          >\n            You already haven't contacts...\n          </Typography>\n        )}\n        <ToastContainer autoClose={3000} />\n      </Box>\n    </Container>\n  );\n}\n"],"names":["ContactForm","dispatch","useDispatch","contacts","useSelector","contactsSelectors","useForm","register","handleSubmit","errors","formState","reset","Box","component","onSubmit","data","name","find","contact","toLowerCase","toast","contactsOperations","error","console","log","sx","mt","width","display","margin","flexDirection","alignItems","TextField","required","fullWidth","id","label","autoFocus","autoComplete","helperText","message","pattern","value","type","number","Button","variant","mb","ContactList","isLoading","Grid","item","xs","md","List","map","ListItem","justifyContent","secondaryAction","IconButton","edge","disabled","onClick","onDeleteContact","Delete","ListItemText","primary","flexBasis","secondary","Filter","onChange","e","changeFilter","currentTarget","Contacts","useEffect","Container","maxWidth","pt","pb","Typography","align","color","gutterBottom","Divider","length","Stack","spacing","autoClose"],"sourceRoot":""}